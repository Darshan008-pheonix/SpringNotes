Spring
Properties:
 ->Spring is the light weighted software which is directly depends on jdk
 ->Spring helps is build loosely coupled application
 ->It Requires less configuration and allows easy integration with any database
 ->It reduces boiler plate codes
 ->It supports IOC where objects are control by the program not by the programmer
 ->It supports dependency injections
 ->It provides default security 


IOC(Inversion Of Control)
 ->Ioc acts like a container in which the control of object creation is given to the program rather than the programmer with the help of 
   configuration file
 ->Ioc helps in creating object implicitly by reading configuration file and instantiate the pojo class


Types Ioc Context or Containers
1)Core Container
  ->We can create core container by using Interface BeanFactory  and XMLBeanFactory implementation class 
  ->We can build only standalone application

2)J2EE Container
  ->We can create this container by using ApplicationContext Interface and its implementation class are
            *ClassPathXmlApplicationContext
            *AnnotationConfigApplicationContext
  ->We can build enterprise level application


3)Web Container
  -> We can create web container by using WebApplicationContext  Interface And its Implementation class is WebApplicationContextUtil

Config.xml
 
Configuration file consists of a parent tag <beans></beans> and child tag is <bean></bean>
In order to configure a pojo class we make use of <bean> tag
<bean> takes two attributes id and class
In id we specify bean id for class we specify fully qualified class name.

Dependency Injection

Dependency Injection (DI) is a design pattern in which objects receive their dependencies from an external source rather than creating them manually by user.
It promotes loose coupling, easier testing, and better code maintainability. In Spring, DI is achieved mainly through Constructor Injection or Setter Injection.


xml data -> https://codeshare.io/5Qgj1e

<property>
    -> this tag will be used inside <bean> tag
    -> this use to set the value for the bean attributes/properties
    -> this tag contains 2 attributes name and value
    name- we need specify the attribute name(var name)
    value- this used specify value(should be encoded in " ")

ex:
<bean id="std" class="com.Student">
 <property name="age" value="28">  </property>
</bean>

class Student{
   
    int age;
    
    void setAge(int age){
       this.age=age;
    }
}

Note:For using property tag setter method for the attribute is must.
it follow proper naming convention


<constructor-arg>
    -> this tag is used inside bean tag when class is having
       parameterized constructor
    ->this tag has a attribute called value
    ->This tag should be used only if there is not at all default 
      construtor otherwise its not compulsory its depends business
      logic.

Ex-
  <bean>
   <constructor-arg value="virat"></constructor-arg>
   <constructor-arg value="28"></constructor-arg>
  </bean>
    
class student{
   
   String name;
   int age;

   Student(String name,int age){
   this.name=name;
   this.age=age;
  }
}

Annotation Based Spring Configuration

@Component:-

* Rather than creating bean tag for every pojo class in .xml configuration file 
  we make use @Component annotation.
* This is the class level annotation used on top of pojo class.
* It is used to make a class as qualified bean for the IOC.

Procedure to achieve annotation based bean creation and access it using .xml
and Application Context
->Create a pojo and annotate as @Component
->Go to .xml file and use <context:component-scan base-package="Package Path"/ > inside <Beans> tag
   Ex:<context:component-scan base-package="com.jspiders"/>
   Note:Make sure <beans> should contain xmlns:context attribute and value
  xml code ->  https://codeshare.io/5QkgDw
->In getBean() please do mention ClassName.class to access the object


@Scope ->Class based annotation
       ->It is used the scope of the class from singleton to prototype etc
      @Scope(value="prototype")


@Value ->It used to perform field injection .It is used inject the values.
         It can been used top of the attributes,Parameters,Setter Method

@Autowired :- It is used achieve automatic dependency injection.
              It will look into the context or container and finds the 
              matching bean and injects inside the field/attribute.
              It can be used with field/attribute ,constructor and setter.

@Primary :- It is class based annotation which describe the bean is having
            higher priority while autowiring .It will bean as default object 
            while autowiring.

@Qualifier :- It is used over come confusion /ambiguity issue when single 
              reference var has multiple objects at the time of autowiring.
              Using @qualifier we can specify the bean which can be autowired.
              @Qualifier can be used attribute/field level also and it 
              can used as class level annotation also.
             @Qualifier should be used along the side of @Autowired
            ex:-@Qualifier("QualifierName/ClassName(CamelCasing))
Note:-Qualifier name can be given for the bean with help @Component or @Qualifier
	
     @Component("QualifierName") 
     #@Qualifier("QualifierName")   
     class Demo{
     }

@Configuration: This annotation marks a class as a source of
bean definitions(creation).This can be used as a alternative
of .xml file.
Any class which is annotated as @Configuration will be treated
as configuration class it is equivalent to the .xml file

We can also use @Bean annotation inside configuration to create
bean.

@ComponentScan:-
    This annotation is used along with @Configuration annotation
to search ,scan and create the bean.
Without @Component scan Spring or @Configuration cant search
and create bean automatically
 Syntax:-
      @ComponentScan(BasePackage="path")


